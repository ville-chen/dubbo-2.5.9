			|—— DUBBO |——服务注册中心：zookeeper
			|		  |——服务调用方式：高性能透明化RPC，提供Dubbo、Hessian、HTTP、RMI、WebService、Thrift、Memcached、Redis协议支持
			|		  |——断路器：集群容错
微服务框架:   |
			|—— SpringCloud |——服务注册中心：eureka
			 		        |——服务调用方式：REST API
			 		  		|——断路器：Hystrix
			 		  		|...

孰优孰劣？Dubbo VS Spring Cloud性能测试大对决！ https://mp.weixin.qq.com/s/omVAEzQTcV5o5AGsSU_u7Q

TPS：每秒事务处理量

ExtensionLoader：拓展加载器，dubbo spi的核心类。
dubbo模仿jdk的spi实现了自己的spi，和jdk spi的初衷一样的是，dubbo的spi也是实现的一种服务发现机制。
在这个基础上，dubbo又增加了对ioc，aop和动态编译compiler的支持。

dubbo内核的组成部分：SPI，AOP，IOC，Compiler。

SPI
    目的：获取一个指定类型的实现类的实例。
    实现：ExtensionLoader;
    步骤：
        1.getExtensionLoader(Class<T> type); 为接口类型T获取ExtensionLoader对象
        2.getAdaptiveExtension(); 获取 T类型的 含@Adaptive的扩展类 的实例，如果这个扩展类中的@Adaptive注解在类上，
            则是人工实现的装饰类对象(如AdaptiveExtensionFactory)；如果注解在方法上，则是动态生成的动态代理类对象(如Protocol$Adaptive)。
        3.getExtension(String name); 获取一个实现类的对象

    (1) 扩展加载器的获取
    ----------------ExtensionLoader.getExtensionLoader(Class<T> type)
    ExtensionLoader.getExtensionLoader(Container.class)
        -->this.type = type;
        -->objectFactory = (type == ExtensionFactory.class ? null : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension();
          -->ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension();
            -->this.type = type;
            -->objectFactory = null;

    1.每个ExtensionLoader对象都有type 和 objectFactory
        objectFactory: ExtensionFactory的AdaptiveExtensionFactory对象包含[SpiExtensionFactory, SpringExtensionFactory]
    2.private static final ConcurrentMap<Class<?>, ExtensionLoader<?>> EXTENSION_LOADERS 其中存储着 全局的 字节码对象 和对应的 扩展加载器

    概括getExtensionLoader过程：根据接口类型，向全局的扩展加载器缓存(EXTENSION_LOADERS)，获取对应loader对象。如果不存在，则用ExtensionLoader的
    构造器创建。loader对象包含两个属性，一个type对象和一个ExtensionFactory对象objectFactory。


    (2) spi adaptive获取的原理
    @Adaptive注解意义：
        @Adaptive注解在类上，代表这是一个人工实现的装饰类，如AdaptiveExtensionFactory
        @Adaptive注解在方法上，则生成一个动态代理类，如Protocol$Adaptive

    ----------------loader.getAdaptiveExtension()
    ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension()//为cachedAdaptiveInstance赋值
        -->createAdaptiveExtension()//单例模式第一次创建T类型的含@Adaptive扩展类实例
            -->getAdaptiveExtensionClass()//获取T类型含@Adaptive的扩展类的字节码对象
                -->getExtensionClasses()//获取并初始化cachedClasses
                    -->loadExtensionClasses()//从配置文件中加载 扩展类字节码对象 信息缓存到cachedAdaptiveClass, cachedWrapperClasses, cachedNames, cachedActivates中
                        -->loadFile()
                -->createAdaptiveExtensionClass()//自动生成一个Adaptive动态代理类，并编译
                    -->ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.compiler.Compiler.class).getAdaptiveExtension()
                    -->compiler.compile(code, classLoader)
            -->injectExtension()//进入Ioc控制反转模式，实现动态注入

    cachedClasses: 缓存一个map，map以< everyName,clazz>存储 没有@Adaptive，构造器没有type类型参数的 扩展类class对象

    loadFile细节：
        目的：将配置文件META-INF/dubbo/internal/com.alibaba.dubbo.rpc.Protocol中的内容，缓存在如下变量中：
            cachedAdaptiveClass: 缓存含有@Adaptive的class，例如ExtensionFactory的AdaptiveExtensionFactory，而Protocol接口则没有。
            cachedWrapperClasses: 缓存没有@Adaptive的class，并且构造器没有type类型参数，例如Protocol spi中的ProtocolFilterWrapper和ProtocolListenerWrapper。
            cachedNames:除了cachedAdaptiveClass、cachedWrapperClasses中的。
            cachedActivates:cachedNames中含有@Activate注解的。

    概括getAdaptiveExtension过程：向loader的cachedAdaptiveInstance中获取 T类型的 含@Adaptive的 扩展类实例，如果不存在，
    则获取含@Adaptive的扩展类字节码对象(获取字节码对象过程：加载spi配置文件，如果有含@Adaptive的扩展类，则存入cachedAdaptiveClass并返回；
    如果没有则根据模版，生成一个含@Adaptive的动态代理类，存入cachedAdaptiveClass并返回)。然后用这个对象创建一个实例并返回。


    (3) 获取指定name的扩展类wrapper对象
    ----------------ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(extName)
    getExtension(String name) //从cachedInstances中获取name对应的扩展类的wrapper实例
        -->createExtension(String name)
            -->getExtensionClasses()
            -->injectExtension(T instance) //dubbo的IOC就是从spi和spring里提取对象进行注入instance。
                -->objectFactory.getExtension(pt, property); //(参数类型,参数名) 从AdaptiveExtensionFactory中的factories[SpiExtensionFactory,SpringExtensionFactory]中获取一个扩展类
                    -->SpiExtensionFactory.getExtension(Class<T> type, String name)
                        -->ExtensionLoader.getExtensionLoader(type)
                        -->loader.getAdaptiveExtension()
                    -->SpringExtensionFactory.getExtension(type,name)
                        -->context.getBean(name)
                -->method.invoke(instance, object);    //执行instance的method方法，注入object实例
            -->injectExtension((T) wrapperClass.getConstructor(type).newInstance(instance)) //再使用wrapperClass进行装饰，得到最终的wrapper对象。

    概括getExtension过程：根据name去cachedInstances中获取对应的扩展类的wrapper实例，如果不存在，则用这个name去cachedClass中取得它的字节码对象并newInstance()。
    然后想这个instance中注入依赖(依赖通过objectFactory的factories获取)，最后用cachedWrapperClass中的对象逐个进行装饰，得到最终的wrapper对象，存入cachedInstance中。